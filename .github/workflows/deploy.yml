# This workflow triggers on a new published release.
# It deploys to your primary server (S1) and then securely calls your
# Appwrite function (server_update) to orchestrate updates on all other servers.

name: Deploy on Release

# Trigger only on published releases
on:
  release:
    types: [published]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout repository
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Get release tag
      - name: Set release version
        run: |
          echo "release_tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          echo "Deploying version: ${GITHUB_REF#refs/tags/}"

      # 3. Deploy to Primary Server (CS1)
      # This is your existing deployment step for the main server.
      - name: Deploy to the main server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_PRIVATE_KEY }}
          script: |
            cd ${{ secrets.PROJECT_PATH }}
            git fetch --all
            git checkout ${{ env.release_tag }}
            source venv/bin/activate
            pip install -r requirements.txt
            python manage.py migrate
            python manage.py collectstatic --noinput
            sudo supervisorctl restart caelium
            echo "Primary server S1 deployed successfully."

      # 4. Trigger Appwrite Update Function (NEW)
      # This step securely calls your Appwrite function to tell it to
      # update all other servers listed in its database.
      - name: Trigger Server Update Function
        run: |
          echo "Calling Appwrite function to orchestrate updates for all servers..."
          curl --location '${{ secrets.APPWRITE_ENDPOINT }}' \
          --form 'secret_key="${{ secrets.SECRET_KEY }}"' \
          # The function runs asynchronously; this just triggers it.
